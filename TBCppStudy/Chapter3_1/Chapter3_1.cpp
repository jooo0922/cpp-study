#include <iostream>
#include <cmath>

using namespace std;

int main()
{
    // 서로 다른 연산자를 사용할 경우, 어떤 연산자가 우선순위가 높은가?
    //int x = 4 + 2 * 3; // 더하기보다 곱하기의 우선순위가 높다.
    
    // 곱하기와 나누기처럼 우선순위가 동일한 연산자들은 어떻게 결합할 것이냐? > 결합법칙(Associativity)
    /*
        컴파일러가 결합법칙의 우선순위를 어떻게 생각하는지를 봐야 한다.
        https://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B 참고!

        여기서 설명하는 결합법칙이란,
        우선순위가 동일한 연산자끼리 만났을 때,
        왼쪽 연산자부터 처리할 것인지,
        오른쪽 연산자부터 처리할 것인지를 결정하는 것!
    */
    //int x = 3 * 4 / 2;

    /*
        연산자의 우선순위를 다 외우기는 어렵기 때문에,
        () 괄호를 사용해서 연산자 우선순위를 명시하는 방법이 좋다!
    */
    //int x = (1 - 2) + (-3); // 3 앞에 붙은 -는 Unary Operator (뒤에 나오는 숫자를 양수나 음수로 바꿔주는 연산자!)

    // ^ 연산자는 제곱이 아닌 XOR 연산자. 그렇다면 제곱은 어떻게?
    int x = std::pow(2, 3); // 2의 3제곱 = 8
    cout << x << endl;

    return 0;
}

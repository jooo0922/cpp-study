#include <iostream>

using namespace std;

int main()
{
    int x = 5;

    cout << x << endl;
    cout << &x << endl; // & : address-of operator (메모리 주소는 기본적으로 16진수로 출력됨.)
    cout << (int)&x << endl; // 16진수 메모리 주소를 10진수 정수형으로 캐스팅하여 출력

    // de-reference operator (*) (cs 에서 '레퍼런스'란, '간접적으로 가리키다' 의 어감으로 많이 쓰임. 포인터도 레퍼런스의 일종)
    /*
        포인터가 
        "저쪽 주소에 가면 이 데이터가 있어요" 라고
        간접적으로 가리키기만 한다면,

        de-reference(역참조) 는 
        "그럼 거기에 진짜 뭐가 있는지 내가 들여다볼께"
        라며 직접적으로 접근한다는 의미
    */
    // &x 가 x 변수 메모리 주소라면, "그 메모리 주소가 가리키는 곳에 진짜 뭐가 있는지" 확인하는 게 역참조 연산자 *(&x)! 
    // *&x 라고 써도 됨. 
    // 결국, & 가 메모리 주소를 나타낸다면, 
    // * 는 & 가 가리키는 곳의 값이므로, 둘이 상쇄가 되어서 그냥 x 안에 담긴 값으로 나오는 원리! 
    cout << *(&x) << endl; 

    // 위에서 확인해 본 메모리 주소 자체를 담는 변수를 '포인터' 라고 함!

    return 0;
}
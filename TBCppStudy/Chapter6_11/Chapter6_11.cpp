#include <iostream>

using namespace std;

int main()
{
    /*
        정적으로 배열을 생성할 경우, 
        1,000,000 개 정도의 int 타입 배열을 선언하면,
        약 4 bytes * 1,000,000 = 4 mb 정도의 용량을 차지함.

        이 정도는 그렇게까지 큰 메모리는 아님에도 불구하고,
        프로그램을 빌드 및 실행하면 알 수 없는 에러가 발생함.

        이 원인이 뭘까?
        정적으로 배열을 생성하면,
        해당 배열은 'stack memory' 에 할당됨.

        그런데 이 스택 메모리(자동 메모리)는
        용량이 작은 편이기 때문에,
        4 mb 정도의 메모리를 차지하는 배열을 할당할 수 없었던 것임!

        반면, '힙 메모리(자유 메모리)'
        는 동적으로 메모리를 할당할 수 있는 메모리 영역인데
        스택보다 훨씬 용량이 크다!

        그래서, 메모리 동적 할당을 잘 사용하는 방법을 익혀야
        더 큰 메모리를 사용하는 변수들을
        자유자재로 다룰 수 있겠지!
    */
    //int array[1000000];

    /*
        new 키워드
        
        c++ 에서 메모리를 동적으로 할당하는 방법!

        아래와 같이, 
        int 타입의 4 bytes 메모리를
        힙 메모리 영역에 할당하고 싶다면,

        new int 를 사용해서 할당할 수 있음.

        이때, new 는 할당된 메모리 공간의 주소값을 반환하므로,
        이 주소값은 포인터 변수에 저장해뒀다가 사용하면 되겠지!
    */
    int* ptr = new int;
    *ptr = 7; // 이렇게 de-referencing 으로 해당 메모리 공간에 값을 초기화할 수 있음!
    
    // 아래처럼 힙 메모리 영역 할당과 동시에 초기화하는 것도 가능
    // int* ptr = new int(7);
    // int* ptr = new int{ 7 };

    cout << ptr << endl; // 힙 메모리 영역에 할당된 주소
    cout << *ptr << endl; // de-referencing 으로 역참조한 실제 값

    return 0;
}